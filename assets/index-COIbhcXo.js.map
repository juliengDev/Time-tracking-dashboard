{"version":3,"file":"index-COIbhcXo.js","sources":["../../src/home.ts"],"sourcesContent":["// Enums and Interfaces\nenum Timeframe {\n  Daily = \"daily\",\n  Weekly = \"weekly\",\n  Monthly = \"monthly\",\n}\n\ninterface TimeframeData {\n  current: number;\n  previous: number;\n}\n\ninterface Timeframes {\n  [Timeframe.Daily]: TimeframeData;\n  [Timeframe.Weekly]: TimeframeData;\n  [Timeframe.Monthly]: TimeframeData;\n}\n\ninterface Activity {\n  title: string;\n  timeframes: Timeframes;\n}\n\n// Global state\nlet currentTimeframe: Timeframe = Timeframe.Weekly;\nlet activityData: Activity[] = [];\n\n// Fetch data function\nasync function fetchData(): Promise<Activity[]> {\n  try {\n    const response = await fetch(\"./data.json\");\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n}\n\n// Update dashboard function\nfunction updateDashboard(data: Activity[], timeframe: Timeframe) {\n  if (!data || data.length === 0) {\n    displayError(\"No data available\");\n    return;\n  }\n\n  const currentHours = document.querySelectorAll<HTMLHeadingElement>(\n    \".dashboard__miniCard__container__info__hours\"\n  );\n  const previousHours = document.querySelectorAll<HTMLHeadingElement>(\n    \".dashboard__miniCard__container__info__prev__hours\"\n  );\n\n  currentHours.forEach((current) => {\n    const activityName = current.getAttribute(\"data-activity\");\n    if (activityName) {\n      const activity = data.find((activity) => activity.title === activityName);\n      if (activity) {\n        current.textContent = `${\n          activity.timeframes[timeframe]?.current ?? 0\n        }hrs`;\n      }\n    }\n  });\n\n  previousHours.forEach((current) => {\n    const activityName = current.getAttribute(\"data-previous-activity\");\n    if (activityName) {\n      const activity = data.find((activity) => activity.title === activityName);\n      if (activity) {\n        current.textContent = `Last ${getTimeframeText(timeframe)} - ${\n          activity.timeframes[timeframe]?.previous ?? 0\n        }hrs`;\n      }\n    }\n  });\n}\n\n// Helper function to get timeframe text\nfunction getTimeframeText(timeframe: Timeframe): string {\n  switch (timeframe) {\n    case Timeframe.Daily:\n      return \"Day\";\n    case Timeframe.Weekly:\n      return \"Week\";\n    case Timeframe.Monthly:\n      return \"Month\";\n  }\n}\n\n// Set timeframe function\nfunction setTimeframe(timeframe: Timeframe, clickedButton: HTMLElement) {\n  currentTimeframe = timeframe;\n  updateDashboard(activityData, currentTimeframe);\n  updateActiveButton(clickedButton);\n}\n\n// Apply dynamic styling to cliked links\nfunction updateActiveButton(clickedLink: HTMLElement) {\n  const buttons = document.querySelectorAll<HTMLElement>(\n    '[id^=\"daily\"], [id^=\"weekly\"], [id^=\"monthly\"]'\n  );\n  buttons.forEach((button) => {\n    button.classList.remove(\"color-white\");\n  });\n  clickedLink.classList.add(\"color-white\");\n}\n\n// Display error function\nfunction displayError(message: string) {\n  alert(\"Error : \" + message);\n}\n\n// Main execution\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n  try {\n    activityData = await fetchData();\n    updateDashboard(activityData, currentTimeframe);\n\n    const timeframeLinks = document.querySelectorAll<HTMLElement>(\n      '[id^=\"daily\"], [id^=\"weekly\"], [id^=\"monthly\"]'\n    );\n    timeframeLinks.forEach((link) => {\n      link.addEventListener(\"click\", () =>\n        setTimeframe(link.id as Timeframe, link)\n      );\n    });\n\n    //Apply activ link default styling\n    const weeklyButton = document.getElementById(\"weekly\");\n    if (weeklyButton) {\n      updateActiveButton(weeklyButton);\n    }\n  } catch (error) {\n    displayError(\"Failed to load data\");\n  }\n});\n"],"names":["currentTimeframe","activityData","fetchData","response","error","updateDashboard","data","timeframe","displayError","currentHours","previousHours","current","activityName","activity","_a","getTimeframeText","setTimeframe","clickedButton","updateActiveButton","clickedLink","button","message","link","weeklyButton"],"mappings":"ssBAwBA,IAAIA,EAA8B,SAC9BC,EAA2B,CAAA,EAG/B,eAAeC,GAAiC,CAC1C,GAAA,CACI,MAAAC,EAAW,MAAM,MAAM,aAAa,EACtC,GAAA,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAEnD,OAAA,MAAMA,EAAS,aACfC,EAAO,CACN,cAAA,MAAM,uBAAwBA,CAAK,EACrCA,CACR,CACF,CAGA,SAASC,EAAgBC,EAAkBC,EAAsB,CAC/D,GAAI,CAACD,GAAQA,EAAK,SAAW,EAAG,CAC9BE,EAAa,mBAAmB,EAChC,MACF,CAEA,MAAMC,EAAe,SAAS,iBAC5B,8CAAA,EAEIC,EAAgB,SAAS,iBAC7B,oDAAA,EAGWD,EAAA,QAASE,GAAY,OAC1B,MAAAC,EAAeD,EAAQ,aAAa,eAAe,EACzD,GAAIC,EAAc,CAChB,MAAMC,EAAWP,EAAK,KAAMO,GAAaA,EAAS,QAAUD,CAAY,EACpEC,IACFF,EAAQ,YAAc,KACpBG,EAAAD,EAAS,WAAWN,CAAS,IAA7B,YAAAO,EAAgC,UAAW,CAC7C,MAEJ,CAAA,CACD,EAEaJ,EAAA,QAASC,GAAY,OAC3B,MAAAC,EAAeD,EAAQ,aAAa,wBAAwB,EAClE,GAAIC,EAAc,CAChB,MAAMC,EAAWP,EAAK,KAAMO,GAAaA,EAAS,QAAUD,CAAY,EACpEC,IACMF,EAAA,YAAc,QAAQI,EAAiBR,CAAS,CAAC,QACvDO,EAAAD,EAAS,WAAWN,CAAS,IAA7B,YAAAO,EAAgC,WAAY,CAC9C,MAEJ,CAAA,CACD,CACH,CAGA,SAASC,EAAiBR,EAA8B,CACtD,OAAQA,EAAW,CACjB,IAAK,QACI,MAAA,MACT,IAAK,SACI,MAAA,OACT,IAAK,UACI,MAAA,OACX,CACF,CAGA,SAASS,EAAaT,EAAsBU,EAA4B,CACnDjB,EAAAO,EACnBF,EAAgBJ,EAAcD,CAAgB,EAC9CkB,EAAmBD,CAAa,CAClC,CAGA,SAASC,EAAmBC,EAA0B,CACpC,SAAS,iBACvB,gDAAA,EAEM,QAASC,GAAW,CACnBA,EAAA,UAAU,OAAO,aAAa,CAAA,CACtC,EACWD,EAAA,UAAU,IAAI,aAAa,CACzC,CAGA,SAASX,EAAaa,EAAiB,CACrC,MAAM,WAAaA,CAAO,CAC5B,CAGA,SAAS,iBAAiB,mBAAoB,SAAY,CACpD,GAAA,CACFpB,EAAe,MAAMC,IACrBG,EAAgBJ,EAAcD,CAAgB,EAEvB,SAAS,iBAC9B,gDAAA,EAEa,QAASsB,GAAS,CAC1BA,EAAA,iBAAiB,QAAS,IAC7BN,EAAaM,EAAK,GAAiBA,CAAI,CAAA,CACzC,CACD,EAGK,MAAAC,EAAe,SAAS,eAAe,QAAQ,EACjDA,GACFL,EAAmBK,CAAY,OAEnB,CACdf,EAAa,qBAAqB,CACpC,CACF,CAAC"}